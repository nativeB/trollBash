{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Divs","prop","react_default","a","createElement","className","i","startAt","hit","join","onClick","handleClick","Score","start","hits","Speed","htmlFor","type","id","value","timeout","onChange","e","handleSpeed","Timer","eta","Controls","stop","setdynamic","dynamic","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setState","setTimeout","Math","abs","target","changePos","time","rand","size","timeoutfn","boxes","push","key","num","floor","random","_this2","_this3","_this4","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22bd9164.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./assets/App.css\";\n\nfunction Divs(prop) {\n    return (\n        <div\n            className={[\n                \"boxes\",\n                prop.i === prop.startAt ? \"boxes-show\" : \"boxes-hide\",\n                prop.hit === prop.i && prop.hit === prop.startAt\n                    ? \"boxes-win\"\n                    : \"boxes-nowin\"\n            ].join(\" \")}\n            onClick={() => {\n                prop.handleClick(prop.i);\n            }}\n        />\n    );\n}\nfunction Score(prop) {\n    return (\n        <div\n            className={[\"score\", prop.start ? \"colorStart\" : \"colorStop\"].join(\" \")}\n        >\n            {prop.hits}{\" \"}\n        </div>\n    );\n}\nfunction Speed(prop) {\n    return (\n        <div className=\"score\">\n            <label htmlFor=\"speed\">speed </label>\n            <input\n                type=\"number\"\n                id=\"speed\"\n                value={prop.timeout}\n                onChange={e => {\n                    prop.handleSpeed(e);\n                }}\n            />{\" \"}\n            ms\n        </div>\n    );\n}\nfunction Timer(prop) {\n    return (\n        <div className=\"score\">\n            <span>{prop.eta} s</span>\n        </div>\n    );\n}\nfunction Controls(prop) {\n    return (\n        <div className=\"score\">\n            <button\n                onClick={() => {\n                    prop.start();\n                }}\n            >\n                Start\n            </button>\n            <button\n                onClick={() => {\n                    prop.stop();\n                }}\n            >\n                Stop\n            </button>\n            <button\n                onClick={() => {\n                    prop.setdynamic();\n                }}\n            >\n                {prop.dynamic ? \"static\" : \"dynamic\"}\n            </button>\n        </div>\n    );\n}\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            startAt: 39,\n            size: 40,\n            timeout: 1000,\n            timeoutfn: null,\n            hit: null,\n            hits: 0,\n            dynamic: false,\n            start: false,\n            eta: 0\n        };\n    }\n    render() {\n        const boxes = [];\n\n        if (this.state.start)\n            for (let i = 0; i <= this.state.size; i++) {\n                boxes.push(\n                    <Divs\n                        key={i}\n                        i={i}\n                        startAt={this.state.startAt}\n                        hit={this.state.hit}\n                        handleClick={this.handleClick}\n                    />\n                );\n            }\n        return (\n            <div className=\"App\">\n                <h2>Troll basher</h2>\n                <div className=\"menu\">\n                    <Controls\n                        start={this.start}\n                        stop={this.stop}\n                        setdynamic={this.setdynamic}\n                        dynamic={this.state.dynamic}\n                    />\n                    <Speed handleSpeed={this.handleSpeed} timeout={this.state.timeout} />\n                    <Timer eta={this.state.eta} />\n                    <Score hits={this.state.hits} start={this.state.start} />\n                </div>\n                <div className=\"box-container\"> {boxes} </div>\n            </div>\n        );\n    }\n    rand(num) {\n        return Math.floor(Math.random() * num);\n    }\n    changePos() {\n        if (!this.state.hit) this.setState({ startAt: this.rand(this.state.size) });\n        setTimeout(() => {\n            this.changePos();\n        }, this.state.timeout);\n    }\n    handleClick = e => {\n        if (this.state.start) {\n            if (e === this.state.startAt)\n                this.setState({ hits: this.state.hits + 1 });\n            this.setState({ hit: e });\n            setTimeout(() => {\n                this.setState({ hit: null });\n            }, 100);\n        }\n    };\n    handleSpeed = e => {\n        this.setState({ timeout: Math.abs(e.target.value) });\n    };\n    start = () => {\n        if (!this.state.start) {\n            this.setState({ start: true, hits: 0, eta: 0 });\n            this.changePos();\n            this.time();\n        }\n    };\n    stop = () => {\n        this.setState({ start: false });\n    };\n    setdynamic = () => {\n        this.setState({ dynamic: !this.state.dynamic });\n    };\n    time() {\n        setTimeout(() => {\n            this.setState({ eta: this.state.eta + 1 });\n            if (this.state.eta === 60) return this.stop();\n            if (this.state.start) this.time();\n            if (this.state.dynamic) this.dynamic();\n        }, 1000);\n    }\n    dynamic = () => {\n        this.setState({ timeout: this.rand(5000) });\n    };\n\n    componentDidMount() {\n        if (this.state.start)\n            setTimeout(() => {\n                this.changePos();\n            }, this.state.timeout);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}